version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: docker/api_gateway/Dockerfile
    ports:
      - "80:8000"  # Expose directly on port 80 for EC2
    env_file: .env
    environment:
      - ENVIRONMENT=staging
      - LOG_LEVEL=INFO
      - HOST=0.0.0.0
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: always
    networks:
      - umt-network
    volumes:
      - ./.tokens:/app/.tokens  # Mount token directory for OAuth credentials

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    ports:
      - "3000:80"
    env_file: ./frontend/.env
    depends_on:
      - api-gateway
    restart: always
    networks:
      - umt-network

  # Agent Services consolidated into one container for EC2 efficiency
  agents:
    build:
      context: .
      dockerfile: docker/agents/Dockerfile
    env_file: .env
    environment:
      - ENVIRONMENT=staging
      - LOG_LEVEL=INFO
      - CONSOLIDATE_AGENTS=true
    depends_on:
      - rabbitmq
      - postgres
    restart: always
    networks:
      - umt-network
    command: ["python", "-m", "src.agents.runner"]

  # Infrastructure Services
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/1_init.sql
      - ./docker/postgres/integration_upgrade.sql:/docker-entrypoint-initdb.d/2_integration_upgrade.sql
    networks:
      - umt-network
    restart: always

  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - umt-network
    restart: always

  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - umt-network
    restart: always

  vector-db:
    image: ankane/pgvector:latest
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=${VECTOR_DB_USER}
      - POSTGRES_PASSWORD=${VECTOR_DB_PASSWORD}
      - POSTGRES_DB=${VECTOR_DB_NAME}
    volumes:
      - vector-db-data:/var/lib/postgresql/data
    networks:
      - umt-network
    restart: always
      
  # Database Migrations
  migrations:
    build:
      context: .
      dockerfile: docker/migrations/Dockerfile
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}
      - PYTHONPATH=/app
      - ENVIRONMENT=staging
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
    networks:
      - umt-network
    command: alembic upgrade head

  # Nginx as a reverse proxy for EC2
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - frontend
    networks:
      - umt-network
    restart: always

networks:
  umt-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data:
  vector-db-data: