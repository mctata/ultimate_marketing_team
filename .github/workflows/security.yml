name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 1'  # Run every Monday at 2 AM
  workflow_dispatch:

jobs:
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Node dependencies
        run: |
          cd frontend
          npm ci

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Ultimate Marketing Team'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --scan ./frontend 
            --scan ./requirements.txt 
            --enableRetired
            --enableExperimental

      - name: Upload scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports

      - name: Fail on high severity vulnerabilities
        run: |
          grep -q "One or more dependencies were identified with High severity vulnerabilities" reports/dependency-check-report.html && exit 1 || exit 0

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build API Gateway
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/api_gateway/Dockerfile
          push: false
          load: true
          tags: umt-api-gateway:test

      - name: Build Agents Container
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/agents/Dockerfile
          push: false
          load: true
          tags: umt-agents:test

      - name: Run Trivy vulnerability scanner on API Gateway
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'umt-api-gateway:test'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner on Agents
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'umt-agents:test'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  static-code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Node dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-results.json
          # Parsing results and failing on high severity
          python -c "import json; results = json.load(open('bandit-results.json')); exit(1 if any(i['issue_severity'] == 'HIGH' for i in results['results']) else 0)"

      - name: Run Safety check
        run: |
          safety check --full-report -r requirements.txt

      - name: Run ESLint security scan on frontend
        run: |
          cd frontend
          npm install eslint-plugin-security
          npx eslint --no-eslintrc --plugin security --config .eslintrc.js src/ --ext .js,.jsx,.ts,.tsx

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: ${{ env.SONAR_TOKEN != '' }}

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  penetration-test:
    name: API Penetration Test
    runs-on: ubuntu-latest
    needs: [dependency-check, container-scan, static-code-analysis]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ultimatemarketing
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      rabbitmq:
        image: rabbitmq:3.9-alpine
        ports:
          - 5672:5672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup test environment
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Setup database
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/ultimatemarketing
          psql -h localhost -U postgres -c "CREATE SCHEMA IF NOT EXISTS umt" ultimatemarketing
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          alembic upgrade head
        env:
          PGPASSWORD: postgres

      - name: Start API server
        run: |
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/ultimatemarketing
          export REDIS_URL=redis://localhost:6379/0
          export RABBITMQ_URL=amqp://guest:guest@localhost:5672/%2F
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          
          # Start API in background
          python -m src.api.main &
          sleep 10  # Wait for server to start

      - name: Run OWASP ZAP API Scan
        uses: zaproxy/action-api-scan@v0.4.0
        with:
          target: 'http://localhost:8000/api/v1'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j'

  report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-check, container-scan, static-code-analysis, secret-scanning]
    if: always()
    steps:
      - uses: actions/checkout@v3

      - name: Download all workflow artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Generate Security Report
        run: |
          echo "# Security Scanning Results" > security-report.md
          echo "" >> security-report.md
          echo "## Summary" >> security-report.md
          echo "" >> security-report.md
          echo "- Dependency Checking: ${{ needs.dependency-check.result }}" >> security-report.md
          echo "- Container Scanning: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- Static Code Analysis: ${{ needs.static-code-analysis.result }}" >> security-report.md
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Action Items" >> security-report.md
          echo "" >> security-report.md
          
          if [[ "${{ needs.dependency-check.result }}" == "failure" ]]; then
            echo "- [ ] Review and fix high severity dependencies" >> security-report.md
          fi
          
          if [[ "${{ needs.container-scan.result }}" == "failure" ]]; then
            echo "- [ ] Address container vulnerabilities" >> security-report.md
          fi
          
          if [[ "${{ needs.static-code-analysis.result }}" == "failure" ]]; then
            echo "- [ ] Fix code security issues" >> security-report.md
          fi
          
          if [[ "${{ needs.secret-scanning.result }}" == "failure" ]]; then
            echo "- [ ] Remove secrets from codebase" >> security-report.md
          fi

      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: Send Notification
        if: ${{ env.SLACK_WEBHOOK != '' }}
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo
          custom_payload: |
            {
              "attachments": [
                {
                  "color": "${{ needs.dependency-check.result == 'success' && needs.container-scan.result == 'success' && needs.static-code-analysis.result == 'success' && needs.secret-scanning.result == 'success' && 'good' || 'danger' }}",
                  "title": "Security Scanning Results",
                  "text": "Security scan ${{ needs.dependency-check.result == 'success' && needs.container-scan.result == 'success' && needs.static-code-analysis.result == 'success' && needs.secret-scanning.result == 'success' && 'passed' || 'failed' }}.\nSee detailed report in workflow artifacts.",
                  "fields": [
                    {
                      "title": "Dependency Check",
                      "value": "${{ needs.dependency-check.result }}",
                      "short": true
                    },
                    {
                      "title": "Container Scan",
                      "value": "${{ needs.container-scan.result }}",
                      "short": true
                    },
                    {
                      "title": "Code Analysis",
                      "value": "${{ needs.static-code-analysis.result }}",
                      "short": true
                    },
                    {
                      "title": "Secret Scan",
                      "value": "${{ needs.secret-scanning.result }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}