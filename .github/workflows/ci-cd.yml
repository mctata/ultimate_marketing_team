name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 mypy black isort
      
      - name: Run flake8
        run: flake8 src/ tests/
      
      - name: Run mypy
        run: mypy src/
      
      - name: Run isort
        run: isort --check-only --profile black src/ tests/
      
      - name: Run black
        run: black --check src/ tests/

  test-python:
    name: Python Tests
    runs-on: ubuntu-latest
    needs: [lint]
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ultimatemarketing
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      rabbitmq:
        image: rabbitmq:3.9-alpine
        ports:
          - 5672:5672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Set up database schema
        run: |
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/ultimatemarketing
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          psql -h localhost -U postgres -c "CREATE SCHEMA IF NOT EXISTS umt" ultimatemarketing
        env:
          PGPASSWORD: postgres
      
      - name: Run migrations
        run: |
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/ultimatemarketing
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          alembic upgrade head
      
      - name: Run tests
        run: |
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/ultimatemarketing
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          pytest -xvs tests/ --cov=src
        env:
          REDIS_URL: redis://localhost:6379/0
          RABBITMQ_URL: amqp://guest:guest@localhost:5672/%2F

  test-js:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: cd frontend && npm ci
      
      - name: Run tests
        run: cd frontend && npm test

  test-migrations:
    name: Test Migrations
    runs-on: ubuntu-latest
    needs: [lint]
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ultimatemarketing
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      
      - name: Set up database schema
        run: |
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/ultimatemarketing
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          psql -h localhost -U postgres -c "CREATE SCHEMA IF NOT EXISTS umt" ultimatemarketing
        env:
          PGPASSWORD: postgres
      
      - name: Run migration tests
        run: |
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/ultimatemarketing
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          pytest -xvs tests/integration/test_migrations.py
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ultimatemarketing

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test-python, test-js, test-migrations]
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build API Gateway
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/api_gateway/Dockerfile
          push: false
          load: true
          tags: umt-api-gateway:test
      
      - name: Build Frontend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/frontend/Dockerfile
          push: false
          load: true
          tags: umt-frontend:test
      
      - name: Build Agents
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/agents/Dockerfile
          push: false
          load: true
          tags: umt-agents:test
      
      - name: Build Migrations
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/migrations/Dockerfile
          push: false
          load: true
          tags: umt-migrations:test
      
      - name: Test Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 10
          docker-compose -f docker-compose.test.yml ps
          docker-compose -f docker-compose.test.yml logs migrations
          docker-compose -f docker-compose.test.yml down

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-python, test-js, test-migrations, docker-build-test]
    if: github.ref == 'refs/heads/develop' && github.event_name != 'pull_request'
    
    # Add deployment steps here when ready
    # This is a placeholder for future implementation
    steps:
      - uses: actions/checkout@v3
      
      - name: Placeholder for staging deployment
        run: echo "Staging deployment would happen here"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-python, test-js, test-migrations, docker-build-test]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    # Add production deployment steps here when ready
    # This is a placeholder for future implementation
    steps:
      - uses: actions/checkout@v3
      
      - name: Placeholder for production deployment
        run: echo "Production deployment would happen here"