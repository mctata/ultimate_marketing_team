version: '3.8'

x-deploy-limits: &deploy-limits
  resources:
    limits:
      cpus: '0.50'
      memory: 384M
    reservations:
      cpus: '0.25'
      memory: 128M

services:
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: docker/api_gateway/Dockerfile
    ports:
      - "8000:8000"
    env_file: .env
    deploy:
      <<: *deploy-limits
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - umt-network

  # Frontend - using pre-built dist folder
  frontend:
    image: nginx:stable-alpine
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./docker/frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    deploy:
      <<: *deploy-limits
    depends_on:
      - api-gateway
    networks:
      - umt-network
    profiles: ["frontend"]  # Only start when explicitly requested

  # Consolidated Agent Service
  marketing-agent:
    build:
      context: .
      dockerfile: docker/agents/Dockerfile
    env_file: .env
    environment:
      - AGENT_NAME=marketing_agent
    deploy:
      <<: *deploy-limits
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: ["python", "-m", "src.agents.runner"]
    networks:
      - umt-network

  # Infrastructure Services
  postgres:
    image: ankane/pgvector:latest
    deploy:
      <<: *deploy-limits
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ultimatemarketing
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/1_init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - umt-network

  redis:
    image: redis:6.2-alpine
    deploy:
      <<: *deploy-limits
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --save 60 1 --loglevel warning
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - umt-network

  rabbitmq:
    image: rabbitmq:3.9-alpine
    deploy:
      <<: *deploy-limits
    ports:
      - "5672:5672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - umt-network
      
  # Database Migrations
  migrations:
    build:
      context: .
      dockerfile: docker/migrations/Dockerfile
    env_file: .env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ultimatemarketing
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - umt-network
    command: alembic upgrade head
    profiles: ["migrations"]

networks:
  umt-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data: