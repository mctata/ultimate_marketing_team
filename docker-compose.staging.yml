version: '3.8'

services:
  # API Gateway
  api-gateway:
    image: api-gateway:latest
    build:
      context: .
      dockerfile: docker/api-gateway.dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=staging
    env_file: ./config/env/.env.staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - umt-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80"  # Changed from port 80 to 8080
      - "3000:80"
    environment:
      - NODE_ENV=staging
      - API_URL=http://api-gateway:8000
    depends_on:
      - api-gateway
    networks:
      - umt-network
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  # Health monitoring API
  health-api:
    build:
      context: .
      dockerfile: monitoring/Dockerfile.health-api
    container_name: umt-health-api
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - RABBITMQ_HOST=rabbitmq
      - API_GATEWAY_HOST=api-gateway
      - ENVIRONMENT=staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 60s
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - api-gateway
    ports:
      - "8001:8000"
    restart: unless-stopped
    networks:
      - umt-network

  # Agent Services
  auth-agent:
    build:
      context: .
      dockerfile: docker/agents/Dockerfile
    env_file: ./config/env/.env.staging
    environment:
      - AGENT_NAME=auth_integration_agent
      - ENVIRONMENT=staging
      - LOG_LEVEL=INFO
    depends_on:
      - rabbitmq
      - postgres
    restart: on-failure
    networks:
      - umt-network
    command: ["python", "-m", "src.agents.runner"]

  brand-agent:
    build:
      context: .
      dockerfile: docker/agents/Dockerfile
    env_file: ./config/env/.env.staging
    environment:
      - AGENT_NAME=brand_project_management_agent
      - ENVIRONMENT=staging
      - LOG_LEVEL=INFO
    depends_on:
      - rabbitmq
      - postgres
    restart: on-failure
    networks:
      - umt-network
    command: ["python", "-m", "src.agents.runner"]

  content-strategy-agent:
    build:
      context: .
      dockerfile: docker/agents/Dockerfile
    env_file: ./config/env/.env.staging
    environment:
      - AGENT_NAME=content_strategy_research_agent
      - ENVIRONMENT=staging
      - LOG_LEVEL=INFO
    depends_on:
      - rabbitmq
      - postgres
    restart: on-failure
    networks:
      - umt-network
    command: ["python", "-m", "src.agents.runner"]

  content-creation-agent:
    build:
      context: .
      dockerfile: docker/agents/Dockerfile
    env_file: ./config/env/.env.staging
    environment:
      - AGENT_NAME=content_creation_testing_agent
      - ENVIRONMENT=staging
      - LOG_LEVEL=INFO
    depends_on:
      - rabbitmq
      - postgres
    restart: on-failure
    networks:
      - umt-network
    command: ["python", "-m", "src.agents.runner"]

  content-ad-agent:
    build:
      context: .
      dockerfile: docker/agents/Dockerfile
    env_file: ./config/env/.env.staging
    environment:
      - AGENT_NAME=content_ad_management_agent
      - ENVIRONMENT=staging
      - LOG_LEVEL=INFO
    depends_on:
      - rabbitmq
      - postgres
    restart: on-failure
    networks:
      - umt-network
    command: ["python", "-m", "src.agents.runner"]

  # Infrastructure Services
  postgres:
    image: postgres:17-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ultimatemarketing
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/1_init.sql
      - ./docker/postgres/integration_upgrade.sql:/docker-entrypoint-initdb.d/2_integration_upgrade.sql
      - ./docker/postgres/install_pgvector.sql:/docker-entrypoint-initdb.d/3_install_pgvector.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - umt-network
    # Removed custom postgres command that might be causing issues
    restart: unless-stopped

  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --save 60 1 --loglevel warning
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - umt-network

  rabbitmq:
    image: rabbitmq:3.9-alpine
    ports:
      - "5672:5672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - umt-network
      
  # PostgreSQL Proxy for initialization
  postgres-proxy:
    image: alpine:latest
    depends_on:
      - postgres
    command: >
      /bin/sh -c "
      apk add --no-cache postgresql-client &&
      echo 'Waiting for PostgreSQL...' &&
      until PGPASSWORD=postgres psql -h postgres -U postgres -d ultimatemarketing -c 'SELECT 1' >/dev/null 2>&1; do
        echo 'Waiting for PostgreSQL to be ready...' &&
        sleep 2;
      done &&
      echo 'PostgreSQL is ready!'"
    healthcheck:
      test: ["CMD", "sh", "-c", "PGPASSWORD=postgres psql -h postgres -U postgres -d ultimatemarketing -c 'SELECT 1' > /dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 2s
    networks:
      - umt-network

  # Database Migrations
  migrations:
    build:
      context: .
      dockerfile: docker/migrations/Dockerfile
    env_file: ./config/env/.env.staging
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/ultimatemarketing
      - PYTHONPATH=/app
      - ENVIRONMENT=staging
    depends_on:
      - postgres
    networks:
      - umt-network
    command: upgrade head

networks:
  umt-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data:
