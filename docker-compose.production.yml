version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: docker/api_gateway/Dockerfile
    image: ${ECR_REPOSITORY}/umt-api-gateway:${APP_VERSION}
    ports:
      - "8000:8000"
    env_file: .env.production
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=WARNING
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: always
    networks:
      - umt-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    image: ${ECR_REPOSITORY}/umt-frontend:${APP_VERSION}
    ports:
      - "80:80"
      - "443:443"
    env_file: ./frontend/.env.production
    depends_on:
      - api-gateway
    restart: always
    networks:
      - umt-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Agent Services
  auth-agent:
    build:
      context: .
      dockerfile: docker/agents/Dockerfile
    image: ${ECR_REPOSITORY}/umt-agents:${APP_VERSION}
    env_file: .env.production
    environment:
      - AGENT_NAME=auth_integration_agent
      - ENVIRONMENT=production
      - LOG_LEVEL=WARNING
    depends_on:
      - rabbitmq
      - postgres
    restart: always
    networks:
      - umt-network
    command: ["python", "-m", "src.agents.runner"]
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  brand-agent:
    build:
      context: .
      dockerfile: docker/agents/Dockerfile
    image: ${ECR_REPOSITORY}/umt-agents:${APP_VERSION}
    env_file: .env.production
    environment:
      - AGENT_NAME=brand_project_management_agent
      - ENVIRONMENT=production
      - LOG_LEVEL=WARNING
    depends_on:
      - rabbitmq
      - postgres
    restart: always
    networks:
      - umt-network
    command: ["python", "-m", "src.agents.runner"]
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  content-strategy-agent:
    build:
      context: .
      dockerfile: docker/agents/Dockerfile
    image: ${ECR_REPOSITORY}/umt-agents:${APP_VERSION}
    env_file: .env.production
    environment:
      - AGENT_NAME=content_strategy_agent
      - ENVIRONMENT=production
      - LOG_LEVEL=WARNING
    depends_on:
      - rabbitmq
      - postgres
    restart: always
    networks:
      - umt-network
    command: ["python", "-m", "src.agents.runner"]
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  content-creation-agent:
    build:
      context: .
      dockerfile: docker/agents/Dockerfile
    image: ${ECR_REPOSITORY}/umt-agents:${APP_VERSION}
    env_file: .env.production
    environment:
      - AGENT_NAME=content_creation_agent
      - ENVIRONMENT=production
      - LOG_LEVEL=WARNING
    depends_on:
      - rabbitmq
      - postgres
    restart: always
    networks:
      - umt-network
    command: ["python", "-m", "src.agents.runner"]
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  content-ad-agent:
    build:
      context: .
      dockerfile: docker/agents/Dockerfile
    image: ${ECR_REPOSITORY}/umt-agents:${APP_VERSION}
    env_file: .env.production
    environment:
      - AGENT_NAME=content_ad_management_agent
      - ENVIRONMENT=production
      - LOG_LEVEL=WARNING
    depends_on:
      - rabbitmq
      - postgres
    restart: always
    networks:
      - umt-network
    command: ["python", "-m", "src.agents.runner"]
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Infrastructure Services
  postgres:
    image: ankane/pgvector:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/1_init.sql
      - ./docker/postgres/integration_upgrade.sql:/docker-entrypoint-initdb.d/2_integration_upgrade.sql
      - ./docker/postgres/install_pgvector.sql:/docker-entrypoint-initdb.d/3_install_pgvector.sql
    networks:
      - umt-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  redis:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - umt-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - umt-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  vector-db:
    image: ankane/pgvector:latest
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=${VECTOR_DB_USER}
      - POSTGRES_PASSWORD=${VECTOR_DB_PASSWORD}
      - POSTGRES_DB=${VECTOR_DB_NAME}
    volumes:
      - vector-db-data:/var/lib/postgresql/data
    networks:
      - umt-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      
  # Database Migrations
  migrations:
    build:
      context: .
      dockerfile: docker/migrations/Dockerfile
    image: ${ECR_REPOSITORY}/umt-migrations:${APP_VERSION}
    env_file: .env.production
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
    networks:
      - umt-network
    command: alembic upgrade head

networks:
  umt-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data:
  vector-db-data: